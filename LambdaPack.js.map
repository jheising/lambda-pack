{"version":3,"file":"LambdaPack.js","sourceRoot":"","sources":["LambdaPack.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs-extra\"\nimport {exec} from 'child_process';\nimport * as path from \"path\";\nimport * as walker from \"module-walker\";\nimport * as _ from \"lodash\";\nimport {terminal} from \"terminal-kit\";\nimport * as async from \"async\";\nimport * as findUp from \"find-up\";\nimport * as tmp from \"tmp\";\nimport * as isBuiltinModule from \"is-builtin-module\";\nimport * as zip from \"cross-zip\";\n\nexport class LambdaPack {\n    static package(lambdaHandlerFilePath: string, otherFiles: string[], outputFileName: string, outputProgressToConsole: boolean = true, excludeAWSSDK: boolean = true, callback?: (error: Error) => void) {\n\n        let tmpDir;\n\n        async.waterfall([\n            // Find a package.json file in the path\n            (done) => {\n                if (outputProgressToConsole) terminal.blue(\"Finding package.json...\\n\");\n                findUp(\"package.json\").then(filepath => {\n\n                    if (outputProgressToConsole) terminal(`package.json file ${filepath ? \"was found at \" + filepath : \"was not found\"}\\n`);\n\n                    done(null, filepath);\n                });\n            },\n            (packageJSONFile, done) => {\n                if (outputProgressToConsole) terminal.blue(\"Determining dependencies...\\n\");\n\n                let installedPackages;\n                let packageJSON: any = {};\n\n                if (packageJSONFile) {\n                    packageJSON = require(packageJSONFile);\n                    installedPackages = packageJSON.dependencies;\n                }\n\n                walker({}).walk(lambdaHandlerFilePath).then((nodes) => {\n\n                    let requiredModules = {};\n                    let requiredLocalFiles = [];\n\n                    _.each(nodes, (node) => {\n                        if (node.foreign) {\n\n                            let moduleName = node.id;\n                            let moduleVersion = \"*\";\n\n                            // Skip built in modules\n                            if (isBuiltinModule(moduleName)) {\n                                return;\n                            }\n\n                            if (installedPackages && installedPackages[moduleName]) {\n                                moduleVersion = installedPackages[moduleName];\n                            }\n\n                            requiredModules[moduleName] = moduleVersion;\n                            if (outputProgressToConsole) terminal(\"Found module: \").green.noFormat(`${moduleName} (${moduleVersion})\\n`);\n                        }\n                        else {\n                            requiredLocalFiles.push(node.filename);\n                            if (outputProgressToConsole) terminal(\"Found file: \").blue.noFormat(`${node.filename}\\n`);\n                        }\n                    });\n\n                    if (excludeAWSSDK) {\n                        delete requiredModules[\"aws-sdk\"];\n                    }\n\n                    done(null, requiredModules, requiredLocalFiles, packageJSON);\n                });\n            },\n            (requiredModules, requiredLocalFiles, packageJSON, done) => {\n                // Create a temporary directory\n                tmpDir = tmp.dirSync({\n                    unsafeCleanup: true\n                });\n\n                // Replace the dependencies in the package.json file with the ones we've found\n                packageJSON.dependencies = requiredModules;\n                fs.writeJsonSync(path.join(tmpDir.name, \"package.json\"), packageJSON);\n\n                done(null, requiredLocalFiles)\n            },\n            (requiredLocalFiles, done) => {\n\n                let filesToCopy = _.union(requiredLocalFiles, otherFiles);\n                let cwd = process.cwd();\n\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Copying source files...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80,\n                        items: filesToCopy.length\n                    });\n                }\n\n                async.eachOfSeries(filesToCopy, (file, index, done) => {\n                    let copyToPath = path.join(tmpDir.name, file.replace(cwd, \"\"));\n                    let filename = path.basename(file);\n\n                    if (outputProgressToConsole) progressBar.startItem(filename);\n                    fs.copy(file, copyToPath, (error) => {\n                        if (outputProgressToConsole) progressBar.itemDone(filename);\n                        done(error);\n                    });\n                }, (error) => {\n                    if (outputProgressToConsole) {\n                        progressBar.stop();\n                        terminal.deleteLine(1);\n                    }\n                    done(error);\n                });\n            },\n            // Install all packages\n            (done) => {\n\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Installing packages...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80\n                    });\n                }\n\n                exec(\"npm install --production\", {\n                    cwd: tmpDir.name\n                }, (error) => {\n                    if (outputProgressToConsole) {\n                        progressBar.stop();\n                        terminal.deleteLine(1);\n                    }\n                    done(error);\n                });\n            },\n            (done) => {\n                let progressBar;\n                if (outputProgressToConsole) {\n                    if (outputProgressToConsole) terminal.blue(\"Packaging it up...\\n\");\n                    progressBar = terminal.progressBar({\n                        width: 80\n                    });\n                }\n\n                zip.zip(tmpDir.name + \"/.\", path.resolve(process.cwd(), outputFileName), (error) => {\n                    if (outputProgressToConsole) {\n                        progressBar.stop();\n                        terminal.deleteLine(1);\n                    }\n                    done(error);\n                });\n            }\n        ], (error) => {\n\n            function finish()\n            {\n                if (outputProgressToConsole) terminal.green(\"All done!\\n\");\n                if(callback) callback(error);\n            }\n\n\n            // Remove our temp directory\n            if (tmpDir) {\n                if (outputProgressToConsole) terminal.blue(\"Cleaning up...\\n\");\n                tmpDir.removeCallback(finish);\n            }\n            else\n            {\n                finish();\n            }\n        });\n\n    }\n}"]}